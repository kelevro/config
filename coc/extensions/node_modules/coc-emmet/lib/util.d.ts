import { TextDocument, Range, Position } from 'vscode-languageserver-protocol';
import { Node, HtmlNode, CssToken, Property, Rule, Stylesheet } from 'EmmetNode';
import { comparePosition } from './bufferStream';
export { comparePosition };
export declare function positionInRange(position: Position, range: Range): number;
export declare function getEmmetHelper(): any;
/**
 * Update Emmet Helper to use user snippets from the extensionsPath setting
 */
export declare function updateEmmetExtensionsPath(): void;
/**
 * Mapping between languages that support Emmet and completion trigger characters
 */
export declare const LANGUAGE_MODES: {
    [id: string]: string[];
};
export declare function isStyleSheet(syntax: string): boolean;
export declare function validate(allowStylesheet?: boolean): boolean;
export declare function getMappingForIncludedLanguages(): {
    [index: string]: string;
};
/**
* Get the corresponding emmet mode for given language mode
* Eg: jsx for typescriptreact/javascriptreact or pug for jade
* If the language is not supported by emmet or has been exlcuded via `exlcudeLanguages` setting,
* then nothing is returned
*
* @param language
* @param exlcudedLanguages Array of language ids that user has chosen to exlcude for emmet
*/
export declare function getEmmetMode(language: string, excludedLanguages: string[]): string | undefined;
/**
 * Parses the given document using emmet parsing modules
 */
export declare function parseDocument(document: TextDocument, showError?: boolean): Node | undefined;
/**
 * Traverse the given document backward & forward from given position
 * to find a complete ruleset, then parse just that to return a Stylesheet
 * @param document TextDocument
 * @param position Position
 */
export declare function parsePartialStylesheet(document: TextDocument, position: Position): Stylesheet | undefined;
/**
 * Returns node corresponding to given position in the given root node
 */
export declare function getNode(root: Node | undefined, position: Position, includeNodeBoundary: boolean): Node;
export declare const allowedMimeTypesInScriptTag: string[];
/**
 * Returns inner range of an html node.
 * @param currentNode
 */
export declare function getInnerRange(currentNode: HtmlNode): Range | undefined;
/**
 * Returns the deepest non comment node under given node
 * @param node
 */
export declare function getDeepestNode(node: Node | undefined): Node | undefined;
export declare function findNextWord(propertyValue: string, pos: number): [number | undefined, number | undefined];
export declare function findPrevWord(propertyValue: string, pos: number): [number | undefined, number | undefined];
export declare function getEmmetConfiguration(syntax: string): {
    preferences: any;
    showExpandedAbbreviation: any;
    showAbbreviationSuggestions: any;
    syntaxProfiles: any;
    variables: any;
    excludeLanguages: any;
    showSuggestionsAsSnippets: any;
};
/**
 * Itereates by each child, as well as nested child's children, in their order
 * and invokes `fn` for each. If `fn` function returns `false`, iteration stops
 */
export declare function iterateCSSToken(token: CssToken, fn: (x: any) => any): boolean;
/**
 * Returns `name` CSS property from given `rule`
 */
export declare function getCssPropertyFromRule(rule: Rule, name: string): Property | undefined;
export declare function getEmbeddedCssNodeIfAny(document: TextDocument, currentNode: Node | null, position: Position): Node | undefined;
export declare function isStyleAttribute(currentNode: Node | null, position: Position): boolean;
