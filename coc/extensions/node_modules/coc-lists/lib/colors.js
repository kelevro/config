"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
class Colors {
    constructor(nvim) {
        this.nvim = nvim;
        this.name = 'colors';
        this.description = 'color schemes';
        this.defaultAction = 'set';
        this.actions = [];
        this.actions.push({
            name: 'set',
            execute: item => {
                if (Array.isArray(item))
                    return;
                nvim.command(`colorscheme ${item.data.name}`, true);
            }
        });
    }
    async loadItems(_context) {
        let { nvim } = this;
        let colors = await nvim.eval('split(globpath(&rtp, "colors/*.vim"),"\n")');
        let hasPackages = await nvim.call('has', ['packages']);
        if (hasPackages) {
            let packageColors = await nvim.eval('split(globpath(&packpath, "pack/*/opt/*/colors/*.vim"),"\n")');
            colors.push(...packageColors);
        }
        return colors.map(file => {
            let name = path_1.default.basename(file, '.vim');
            return {
                label: `${name}\t${file}`,
                filterText: name,
                data: { name }
            };
        });
    }
    doHighlight() {
        let { nvim } = this;
        nvim.pauseNotification();
        nvim.command('syntax match CocColorsName /\\v^[^\\t]+/ contained containedin=CocColorsLine', true);
        nvim.command('syntax match CocColorsFile /\\t.*$/ contained containedin=CocColorsLine', true);
        nvim.command('highlight default link CocColorsName Identifier', true);
        nvim.command('highlight default link CocColorsFile Comment', true);
        nvim.resumeNotification(false, true).catch(_e => {
            // noop
        });
    }
}
exports.default = Colors;
//# sourceMappingURL=colors.js.map