"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const files_1 = tslib_1.__importDefault(require("./files"));
const buffers_1 = tslib_1.__importDefault(require("./buffers"));
const grep_1 = tslib_1.__importDefault(require("./grep"));
const locationlist_1 = tslib_1.__importDefault(require("./locationlist"));
const quickfix_1 = tslib_1.__importDefault(require("./quickfix"));
const mru_1 = tslib_1.__importDefault(require("./mru"));
const words_1 = tslib_1.__importDefault(require("./words"));
const helptags_1 = tslib_1.__importDefault(require("./helptags"));
const tags_1 = tslib_1.__importDefault(require("./tags"));
const filetypes_1 = tslib_1.__importDefault(require("./filetypes"));
const colors_1 = tslib_1.__importDefault(require("./colors"));
const marks_1 = tslib_1.__importDefault(require("./marks"));
const windows_1 = tslib_1.__importDefault(require("./windows"));
const commands_1 = tslib_1.__importDefault(require("./commands"));
const maps_1 = tslib_1.__importDefault(require("./maps"));
const cmdhistory_1 = tslib_1.__importDefault(require("./cmdhistory"));
const searchhistory_1 = tslib_1.__importDefault(require("./searchhistory"));
async function activate(context) {
    let { subscriptions } = context;
    let config = coc_nvim_1.workspace.getConfiguration('lists');
    let disabled = config.get('disabledLists', []);
    function isDisabled(name) {
        return disabled.indexOf(name) !== -1;
    }
    if (!isDisabled('cmdhistory')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new cmdhistory_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('searchhistory')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new searchhistory_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('vimcommands')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new commands_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('maps')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new maps_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('colors')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new colors_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('windows')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new windows_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('marks')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new marks_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('filetypes')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new filetypes_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('files')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new files_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('tags')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new tags_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('helptags')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new helptags_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('buffers')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new buffers_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('grep')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new grep_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('LocationList')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new locationlist_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('mru')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new mru_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('quickfix')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new quickfix_1.default(coc_nvim_1.workspace.nvim)));
    }
    if (!isDisabled('words')) {
        subscriptions.push(coc_nvim_1.listManager.registerList(new words_1.default(coc_nvim_1.workspace.nvim)));
    }
}
exports.activate = activate;
//# sourceMappingURL=index.js.map