"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const safe_1 = tslib_1.__importDefault(require("colors/safe"));
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const util_1 = require("./util");
const matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
class Words extends coc_nvim_1.BasicList {
    constructor(nvim) {
        super(nvim);
        this.name = 'words';
        this.searchHighlight = false;
        this.interactive = true;
        this.description = 'word matches of current buffer';
        this.options = [{
                name: '-w, -word',
                description: 'Match word boundary.'
            }];
        this.addLocationActions();
    }
    async loadItems(context) {
        let { input, window } = context;
        if (!input)
            return [];
        let valid = await window.valid;
        if (!valid)
            return [];
        let buf = await window.buffer;
        let doc = coc_nvim_1.workspace.getDocument(buf.id);
        if (!doc)
            return;
        let { args } = context;
        let wordMatch = args.indexOf('-w') !== -1 || args.indexOf('-word') !== -1;
        let content = doc.getDocumentContent();
        let result = [];
        let lnum = 1;
        let total = doc.lineCount.toString().length;
        let flags = context.options.ignorecase ? 'ig' : 'g';
        let source = input.replace(matchOperatorsRe, '\\$&');
        if (wordMatch)
            source = `\\b${source}\\b`;
        let regex = new RegExp(source, flags);
        for (let line of content.split('\n')) {
            let idx = line.indexOf(input);
            if (idx != -1) {
                if (wordMatch && !regex.test(line)) {
                    continue;
                }
                let range = vscode_languageserver_protocol_1.Range.create(lnum - 1, idx, lnum - 1, idx + input.length);
                let pre = `${safe_1.default.magenta(lnum.toString())}${util_1.pad(lnum.toString(), total)}`;
                let text = line.replace(regex, safe_1.default.red(input));
                result.push({
                    label: `${pre} ${text}`,
                    location: vscode_languageserver_protocol_1.Location.create(doc.uri, range),
                    filterText: ''
                });
            }
            lnum = lnum + 1;
        }
        return result;
    }
}
exports.default = Words;
//# sourceMappingURL=words.js.map